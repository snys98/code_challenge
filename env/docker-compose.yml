version: '3.7'
name: dev_challenge_io

services:

  # The 'setup' service runs a one-off script which initializes users inside
  # Elasticsearch — such as 'logstash_internal' and 'kibana_system' — with the
  # values of the passwords defined in the '.env' file. It also creates the
  # roles required by some of these users.
  #
  # This task only needs to be performed once, during the *initial* startup of
  # the stack. Any subsequent run will reset the passwords of existing users to
  # the values defined inside the '.env' file, and the built-in roles to their
  # default permissions.
  #
  # By default, it is excluded from the services started by 'docker compose up'
  # due to the non-default profile it belongs to. To run it, either provide the
  # '--profile=setup' CLI flag to Compose commands, or "up" the service by name
  # such as 'docker compose up setup'.
  setup:
    profiles:
      - setup
    build:
      context: setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    volumes:
      - ./setup/entrypoint.sh:/entrypoint.sh:ro,Z
      - ./setup/lib.sh:/lib.sh:ro,Z
      - ./setup/roles:/roles:ro,Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    networks:
      - dev
    depends_on:
      - elasticsearch

  elasticsearch:
    hostname: elasticsearch.${DOMAIN_NAME}
    dns: 172.22.0.2
    build:
      context: elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch:/usr/share/elasticsearch/data:Z
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      # Bootstrap password.
      # Used to initialize the keystore during the initial startup of
      # Elasticsearch. Ignored on subsequent runs.
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      dev:
    restart: unless-stopped

  logstash:
    hostname: logstash.${DOMAIN_NAME}
    dns: 172.22.0.2
    build:
      context: logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - 5044:5044
      - 50000:50000/tcp
      - 50000:50000/udp
      - 9600:9600
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    networks:
      dev:
    depends_on:
      - elasticsearch
    restart: unless-stopped

  kibana:
    hostname: kibana.${DOMAIN_NAME}
    dns: 172.22.0.2
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kibana.entrypoints=http,https"
      - "traefik.http.routers.kibana.tls=true"
      - "traefik.http.routers.kibana.rule=Host(`kibana.${DOMAIN_NAME}`)"
    build:
      context: kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - 5601:5601
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    networks:
      dev:
    depends_on:
      - elasticsearch
    restart: unless-stopped

  apm-server:
    hostname: apm-server.${DOMAIN_NAME}
    dns: 172.22.0.2
    build:
      context: apm-server/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
    volumes:
      - ./apm-server/config/apm-server.yml:/usr/share/apm-server/apm-server.yml
    ports:
      - "8200:8200"
    networks:
      dev:
    depends_on:
      - elasticsearch
    restart: unless-stopped

  redis:
    hostname: redis.${DOMAIN_NAME}
    dns: 172.22.0.2
    image: redis
    ports:
      - "6379:6379"
    networks:
      dev:
    restart: unless-stopped

  mongo:
    hostname: mongo.${DOMAIN_NAME}
    dns: 172.22.0.2
    image: mongo:5.0.17
    ports:
      - 27017:27017
    healthcheck:
      test: test $$(echo "rs.initiate().ok || rs.status().ok" | mongo --quiet) -eq 1
      interval: 10s
      start_period: 30s
    networks:
      dev:
    command: ["--replSet", "rs0", "--bind_ip_all"]
    restart: unless-stopped
    volumes:
      - ./mongo/config/mongod.conf:/etc/mongod.conf

  dns:  
    image: jpillora/dnsmasq  
    command: -d -q -C /etc/dnsmasq.conf  
    volumes:  
      - ./dns/dnsmasq.conf:/etc/dnsmasq.conf  
    ports:  
      - "53:53/tcp"  
      - "53:53/udp"  
    cap_add:  
      - NET_ADMIN  
    restart: always  
    dns:  
      - 127.0.0.1  

  traefik:
    hostname: traefik.${DOMAIN_NAME}
    image: traefik:v3.0.0-beta5
    restart: always
    ports:
      - 80:80
      - 443:443
    command:
      - "--global.sendanonymoususage=false"
      - "--global.checknewversion=false"
      - "--api=true"
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--api.debug=true"
      - "--ping=true"
      - "--log.level=DEBUG"
      - "--log.format=common"
      - "--accesslog=true"
      - "--entrypoints.https.address=:443" 
      - "--entrypoints.http.http.redirections.entryPoint.to=https"
      - "--entrypoints.http.http.middlewares=compress@file"
      - "--entrypoints.https.http.middlewares=compress@file"
      - "--providers.docker=true"
      - "--providers.docker.watch=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.useBindPortIP=false"
      - "--providers.docker.network=dev"
      - "--providers.file=true"
      - "--providers.file.watch=true"
      - "--providers.file.directory=/etc/traefik/config"
      - "--providers.file.debugloggeneratedtemplate=true"
    networks:
      - dev
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=dev"

      - "traefik.http.middlewares.gzip.compress=true"

      - "traefik.http.routers.traefik-dashboard-secure.entrypoints=http,https"
      - "traefik.http.routers.traefik-dashboard-secure.tls=true"
      - "traefik.http.routers.traefik-dashboard-secure.rule=Host(`traefik.${DOMAIN_NAME}`)"
      - "traefik.http.routers.traefik-dashboard-secure.service=dashboard@internal"

      - "traefik.http.routers.traefik-dashboard-api-secure.entrypoints=http,https"
      - "traefik.http.routers.traefik-dashboard-api-secure.tls=true"
      - "traefik.http.routers.traefik-dashboard-api-secure.rule=Host(`traefik.${DOMAIN_NAME}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.traefik-dashboard-api-secure.service=api@internal"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs/:/certs/:ro
      - ./traefik/config/:/etc/traefik/config/:ro
    deploy:
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider --proxy off localhost:8080/ping || exit 1"]
      interval: 5s
      retries: 10
    logging:
      driver: "json-file"
      options:
        max-size: "10m"

  tester:
    hostname: tester.${DOMAIN_NAME}
    profiles:
      - tester
    dns: 172.22.0.2
    image: tester:latest
    networks:
      dev:
  
networks:
  dev:
    name: dev
    attachable: true
    internal: true
    external: true
    enable_ipv6: true
    driver: bridge
    ipam:
      config:  
        - subnet: 172.22.0.0/16  
          gateway: 172.22.0.1  

volumes:
  elasticsearch:
  mongo:
